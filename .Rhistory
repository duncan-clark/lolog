#Format the dates:
data$report_date <- lubridate::ymd(data$report_date)
data$onset_date <- lubridate::ymd(data$onset_date)
data$proxy_onset_date <- lubridate::ymd(data$proxy_onset_date)
data$died_date <- lubridate::ymd(data$died_date)
inc_obj <- incidence::incidence(data$report_date,groups = data$currentmuncity)
cases <- as.data.frame(inc_obj)
#melt to transform to long format data:
cases <- reshape2::melt(cases,id.vars = c('dates'))
#covert factors back to characters:
cases$variable <- levels(cases$variable)[cases$variable]
head(cases)
#covert factors back to characters:
cases$variable <- levels(cases$variable)[cases$variable]
inc_obj <- incidence::incidence(data$report_date,groups = data$currentmuncity)
cases <- as.data.frame(inc_obj)
#melt to transform to long format data:
cases <- reshape2::melt(cases,id.vars = c('dates'))
#covert factors back to characters:
cases$variable <- levels(cases$variable)[cases$variable]
cases <- cases %>%
dplyr::rename(region = variable,cases = value,date = dates) %>%
mutate(import_status = "local")
head(cases)
#Make a linelist for the rt_pipeline function
linelist = data
linelist$onset_date <- lubridate::dmy(linelist$onset_date)
linelist$report_date <- lubridate::ymd(linelist$report_date)
#Process the line list for the rt_pipeline function
lines = linelist %>%
select(onset_date,report_date,currentmuncity) %>%
rename(date_onset = onset_date,date_confirm = report_date,region = currentmuncity) %>%
dplyr::filter(!is.na(date_onset)) %>%
mutate(report_delay = as.numeric(date_confirm - date_onset)) %>%
mutate(import_status = "local")
head(lines)
#Make a linelist for the rt_pipeline function
linelist = data
head(line_list)
head(linelist)
lines = linelist %>%
select(onset_date,report_date,currentmuncity) %>%
rename(date_onset = onset_date,date_confirm = report_date,region = currentmuncity) %>%
dplyr::filter(!is.na(date_onset))
head(lines)
lines = linelist %>%
select(onset_date,report_date,currentmuncity) %>%
rename(date_onset = onset_date,date_confirm = report_date,region = currentmuncity) %>%
dplyr::filter(!is.na(date_onset)) %>%
mutate(report_delay = as.numeric(date_confirm - date_onset))
head(lines)
lines = linelist %>%
select(onset_date,report_date,currentmuncity) %>%
rename(date_onset = onset_date,date_confirm = report_date,region = currentmuncity) %>%
dplyr::filter(!is.na(date_onset)) %>%
mutate(report_delay = as.numeric(date_confirm - date_onset)) %>%
mutate(import_status = "local")
head(lines)
#Does parallel processing to speed up
#Distribute jobs among the processor cores, can speed up code but can cause computer to crash
future::plan(strategy = "multiprocess", workers = future::availableCores())
data.table::setDTthreads(threads = 1)
head(cases)
# Run pipeline ----------------------------------------------------
#Change the name to confirm to make the EpiNow work
names(cases)[4] <- "confirm"
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0(country, "_EpiNow"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples = 10
)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0(country, "_EpiNow"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples = 10
)
debug(regional_rt_pipeline)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0(country, "_EpiNow"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples = 10
)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0(country, "_EpiNow"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples = 10
)
debug(regional_rt_pipeline)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0(country, "_EpiNow"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples = 10
)
head(cases)
head(lines)
data.table::copy(cases)[, .(confirm = sum(confirm,
na.rm = TRUE)), by = c("region", "date")]
(confirm = sum(confirm,
na.rm = TRUE)), by = c("region", "date")
(confirm = sum(confirm,
na.rm = TRUE)), by = c("region", "date")
head(cases)
inc_obj <- incidence::incidence(data$report_date,groups = data$currentmuncity)
cases <- as.data.frame(inc_obj)
#melt to transform to long format data:
cases <- reshape2::melt(cases,id.vars = c('dates'))
#covert factors back to characters:
cases$variable <- levels(cases$variable)[cases$variable]
cases <- cases %>%
dplyr::rename(region = variable,cases = value,date = dates) %>%
mutate(import_status = "local")
# Run pipeline ----------------------------------------------------
#Change the name to confirm to make the EpiNow work
names(cases)[3] <- "confirm"
head(cases)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0(country, "_EpiNow"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples = 10
)
undebug(regional_rt_pipeline)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0(country, "_EpiNow"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples = 10
)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples = 10
)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)}
)
getwd()
getwd()
linelist <- linelist %>% dplyr::mutate(travel_history_location = ifelse(travel_history_location %in%
"", NA, travel_history_location), travel_history_dates = ifelse(travel_history_dates %in%
"", NA, travel_history_dates)) %>% dplyr::mutate(import_status = dplyr::if_else(!is.na(travel_history_location) |
!is.na(travel_history_dates), "imported", "local"),
date_confirm = lubridate::dmy(date_confirmation),
date_onset = lubridate::dmy(date_onset_symptoms),
report_delay = as.integer(as.Date(date_confirm) -
as.Date(date_onset))) %>% dplyr::select(date_onset,
)
linelist <- read.csv("https://raw.githubusercontent.com/epiforecasts/NCoVUtils/master/data-raw/linelist.csv")
linelist %>% tibble::as_tibble()
#Stole the cleaning code too
country <- NULL
city <- NULL
travel_history_location <- NULL
travel_history_dates <- NULL
date_confirmation <- NULL
date_onset_symptoms <- NULL
date_confirm <- NULL
date_onset <- NULL
report_delay <- NULL
import_status <- NULL
linelist <- linelist %>% dplyr::mutate(travel_history_location = ifelse(travel_history_location %in%
"", NA, travel_history_location), travel_history_dates = ifelse(travel_history_dates %in%
"", NA, travel_history_dates)) %>% dplyr::mutate(import_status = dplyr::if_else(!is.na(travel_history_location) |
!is.na(travel_history_dates), "imported", "local"),
date_confirm = lubridate::dmy(date_confirmation),
date_onset = lubridate::dmy(date_onset_symptoms),
report_delay = as.integer(as.Date(date_confirm) -
as.Date(date_onset))) %>% dplyr::select(date_onset,
date_confirm, report_delay, import_status, country) %>% tidyr::drop_na(date_confirm)
names(linelist)
head(linelist)
require(EpiNow,lib.loc = 'C:/Users/Duncan/Documents/WHO/tutoring') #This is version 3.0 for me
rm(list=ls())
require(EpiNow,lib.loc = 'C:/Users/Duncan/Documents/R/win-library/4.0') #This is version 4.0 for me
require(EpiNow,lib.loc = 'C:/Users/Duncan/Documents/WHO/tutoring') #This is version 3.0 for me
require(EpiNow,lib.loc = 'C:/Users/Duncan/Documents/R/win-library/4.0') #This is version 4.0 for me
require(NCoVUtils)
require(furrr)
require(future)
require(dplyr)
require(tidyr)
require(lubridate)
require(magrittr)
require(future.apply)
require(fable)
require(fabletools)
require(feasts)
require(urca)
data <- read.csv("C:/Users/Duncan/Documents/WHO/tutoring/data/data for modelling - 28 May.csv",)
#Format the dates:
data$report_date <- lubridate::ymd(data$report_date)
data$onset_date <- lubridate::ymd(data$onset_date)
data$proxy_onset_date <- lubridate::ymd(data$proxy_onset_date)
data$died_date <- lubridate::ymd(data$died_date)
inc_obj <- incidence::incidence(data$report_date,groups = data$currentmuncity)
cases <- as.data.frame(inc_obj)
#melt to transform to long format data:
cases <- reshape2::melt(cases,id.vars = c('dates'))
#covert factors back to characters:
cases$variable <- levels(cases$variable)[cases$variable]
cases <- cases %>%
dplyr::rename(region = variable,cases = value,date = dates) %>%
mutate(import_status = "local")
#Make a linelist for the rt_pipeline function
linelist = data
#Process the line list for the rt_pipeline function
lines = linelist %>%
select(onset_date,report_date,currentmuncity) %>%
rename(date_onset = onset_date,date_confirm = report_date,region = currentmuncity) %>%
dplyr::filter(!is.na(date_onset)) %>%
mutate(report_delay = as.numeric(date_confirm - date_onset)) %>%
mutate(import_status = "local")
#Does parallel processing to speed up
#Distribute jobs among the processor cores, can speed up code but can cause computer to crash
future::plan(strategy = "multiprocess", workers = future::availableCores())
data.table::setDTthreads(threads = 1)
# Run pipeline ----------------------------------------------------
#Change the name to confirm to make the EpiNow work
names(cases)[3] <- "confirm"
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
)
# running the above code results in Error: unused argument (samples = 10)
# running the above code results in Error: unused argument (samples = 10)
# ellipsis (...) in EpiNow::regional_rt_pipeline passed to EpiNow::rt_pipeline, but EpiNow::rt_pipeline does not accept ellipsis
# running the above code results in Error: unused argument (samples = 10)
# ellipsis (...) in EpiNow::regional_rt_pipeline passed to EpiNow::rt_pipeline, but EpiNow::rt_pipeline does not accept ellipsis
head(cases)
head(lines)
apply(lines,2,FUN = summary)
packageVersion('EpiNow')
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples =10
)
future::plan(strategy = "multiprocess", workers = future::availableCores())
data.table::setDTthreads(threads = 1)
# Run pipeline ----------------------------------------------------
#Change the name to confirm to make the EpiNow work
names(cases)[3] <- "confirm"
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples =10
)
data <- read.csv("C:/Users/Duncan/Documents/WHO/tutoring/data/data for modelling - 28 May.csv",)
#Format the dates:
data$report_date <- lubridate::ymd(data$report_date)
data$onset_date <- lubridate::ymd(data$onset_date)
data$proxy_onset_date <- lubridate::ymd(data$proxy_onset_date)
data$died_date <- lubridate::ymd(data$died_date)
inc_obj <- incidence::incidence(data$report_date,groups = data$currentmuncity)
cases <- as.data.frame(inc_obj)
#melt to transform to long format data:
cases <- reshape2::melt(cases,id.vars = c('dates'))
#covert factors back to characters:
cases$variable <- levels(cases$variable)[cases$variable]
cases <- cases %>%
dplyr::rename(region = variable,cases = value,date = dates) %>%
mutate(import_status = "local")
#Make a linelist for the rt_pipeline function
linelist = data
#Process the line list for the rt_pipeline function
lines = linelist %>%
select(onset_date,report_date,currentmuncity) %>%
rename(date_onset = onset_date,date_confirm = report_date,region = currentmuncity) %>%
dplyr::filter(!is.na(date_onset)) %>%
mutate(report_delay = as.numeric(date_confirm - date_onset)) %>%
mutate(import_status = "local")
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples =10
)
head(cases)
# Run pipeline ----------------------------------------------------
#Change the name to confirm to make the EpiNow work
names(cases)[3] <- "confirm"
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples =10
)
help("regional_rt_pipeline")
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)},
samples =10
)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)}
)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
samples,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)}
)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
samples = 10,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)}
)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
samples = 10,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)}
)
EpiNow::regional_rt_pipeline(
cases = cases,
linelist = linelist,
target_folder = paste0("EpiNow_testing"),
case_limit = 60,
horizon = 14,
samples = 10,
# report_forecast = TRUE,
forecast_model = function(...) {
EpiSoon::fable_model(model = fabletools::combination_model(fable::RW(y ~ drift()), fable::ETS(y),
fable::NAIVE(y), cmbn_args = list(weights = "inv_var")), ...)}
)
rm(list=ls())
library(statnet)
#make a fake network
net <- as.network(as.matrix(rnorm(50*50),50) > 0)
plot(net)
summary(net,print.adj = F)
#make a fake network
net <- as.network(as.matrix(rnorm(50*50),50) > 2)
plot(net)
#make a fake network
net <- as.network(matrix(rnorm(50*50),nrow = 50) > 2)
summary(net,print.adj = F)
dev.off()
plot(net)
#This script tests the generate model function of the LOLOG package
library(lolog)
Rcpp::sourceCpp('Academics/UCLA_Academics/Networks/lolog/src/RcppModule.cpp')
Rcpp::sourceCpp('Academics/UCLA_Academics/Networks/lolog/src/RcppModule.cpp')
Rcpp::sourceCpp('Academics/UCLA_Academics/Networks/lolog/src/RcppModule.cpp')
source('~/Academics/UCLA_Academics/Networks/lolog_builder.R', echo=TRUE)
#This script tests the generate model function of the LOLOG package
library(lolog)
library(statnet)
library(microbenchmark)
#make a fake network
net <- as.network(matrix(rnorm(50*50),nrow = 50) > 2)
#DIRECTED
#fit lolog model:
model <- lolog(net ~ edges + star(c(2,3)))
#make a model to simulate from
model <- lolog::createLatentOrderLikelihood(net~ edges + star(c(2,3)),model$theta)
tmp <- model$generateNetwork()
tmp <- model$generateNetworkReturnChanges()
#Compare the speed and size
microbenchmark::microbenchmark(model$generateNetwork())
microbenchmark::microbenchmark(model$generateNetworkReturnChanges())
#Compare the speed and size
microbenchmark::microbenchmark(model$generateNetwork())
microbenchmark::microbenchmark(model$generateNetworkReturnChanges())
#Compare the speed and size
microbenchmark::microbenchmark(model$generateNetwork())
microbenchmark::microbenchmark(model$generateNetworkReturnChanges())
object.size(model$generateNetwork())
object.size(model$generateNetworkReturnChanges())
#UNDIRECTED
net <- matrix(rnorm(50*50)>2,nrow = 50)
net <- as.network(t(net) %*% net)
set.network.attribute(net,'directed',FALSE)
plot(net)
model <- lolog(net ~ edges + star(c(2,3)))
#make a model to simulate from
model <- lolog::createLatentOrderLikelihood(net ~ edges + star(c(2,3)),c(-1,1,-1))
tmp <- model$generateNetwork()
#Compare the speed and size
microbenchmark::microbenchmark(model$generateNetwork())
microbenchmark::microbenchmark(model$generateNetworkReturnChanges())
object.size(model$generateNetwork())
object.size(model$generateNetworkReturnChanges())
